# mibi.sce_proteins <- mibi.sce[which(proteins),]
# mibi.sce_proteins
# rownames(mibi.sce_proteins)
mibi.sce_proteins <- mibi.sce[rowData(mibi.sce)$is_protein == 1,]
mibi.sce_proteins
rm(mibi.sce)
round(table(mibi.sce_proteins$tumor_group)/ncol(mibi.sce_proteins),2)
# Immune Cells
round(table(mibi.sce_proteins$immune_group)/ncol(mibi.sce_proteins),2)
table(colData(mibi.sce_proteins)$tumor_group)
table(colData(mibi.sce_proteins)$tumor_group, colData(mibi.sce_proteins)$immune_group)
mibi.sce_proteins <- mibi.sce_proteins[, colData(mibi.sce_proteins)$tumor_group %in% c("Immune", "Keratin-positive tumor")]
# colData(mibi.sce_proteins)$DONOR_NO <- colData(mibi.sce_proteins)$DONOR_NO %>% as.character()
# mibi <- mibi.sce_proteins[, colData(mibi.sce_proteins)$DONOR_NO %in% "30838"]
mibi <- mibi.sce_proteins
mibi
#drop cells(columns) with no protein expression
mibi <- mibi[, colSums(assay(mibi)) > 0]
mibi
#drop proteins(rows) with no expression in any of these cells
mibi <- mibi[rowSums(assay(mibi)) > 0, ]
mibi
summary(as.vector(assay(mibi)))
hist(as.vector(assay(mibi)), breaks = 100)
# remove cells with outlier expression
rm_outliers <- apply(assay(mibi), 2, function(x){ sum(abs(x) >60) >= 1 })
mibi <- mibi[, which(!rm_outliers)]
mibi
75208
75208 -75180
or <- order(rowMeans(assay(mibi)),
decreasing=TRUE)
colData(mibi)$cell_id <- paste0("mibi_", seq(1, dim(mibi)[2]))
colnames(mibi) <- colData(mibi)$cell_id
colData(mibi)$DONOR_NO <- colData(mibi)$DONOR_NO %>% as.character()
ass <- assay(mibi)[or, sample(1:dim(mibi)[2], 1000)]
df <- as.data.frame(colData(mibi)[colnames(ass), c("tumor_group", "immune_group","DONOR_NO","cell_id")])
df <- with(df, df[order(tumor_group, immune_group, DONOR_NO,cell_id),])
ass <- ass[, df$cell_id]
df <- dplyr::select(df, -cell_id)
rownames(ass) <- rownames(rowData(mibi))[or]
p <- pheatmap(ass,
annotation_col = df,
cluster_rows = FALSE,
cluster_cols = FALSE,
fontsize_row = 14,
fontsize_col = 14,
show_colnames = FALSE)
ggsave("../Figures/mibi_tof.png", p , width = 12, height = 10)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE,
fig.width = 10,
fig.height = 10)
#library(flowCore)
library(SingleCellExperiment)
library(ggplot2)
# library(rstan)
#library(scater)
library(plyr)
library(reshape2)
library(readr)
#library(CATALYST)
library(magrittr)
#library(scMerge)
library(MultiAssayExperiment)
library(dplyr)
library(DESeq2)
library(abind)
library(tibble)
library(RColorBrewer)
library(igraph)
library(raster)
library(spdep)
library(stars)
library(stringr)
library(pheatmap)
# load("../Data/masstagSCE.rda")
# cd45.sce # 38 * 426872
# rm(epith.sce, livecells.sce, myeloid.sce, tcell.sce)
# unique(colData(cd45.sce)$patient_id.y[which(is.na(colData(cd45.sce)$Gender))])
# cd45_to_keep <- which(!is.na(colData(cd45.sce)$Gender))
# cd45.sce_dropna <- cd45.sce[,cd45_to_keep]
# cd45.sce_dropna # 38 * 420685
# # To verify there are no (true) NA's left:
# sum(is.na(rowData(cd45.sce_dropna)))
# rm(cd45.sce, cd45_to_keep)
#saveRDS(cd45.sce_dropna, "../Data/cd45_sce_dropna.rds")
cd45_sce_dropna <- readRDS("../Data/cd45_sce_dropna.rds")
cd45_sce_dropna
Proteins_in_cd45 <- !(rowData(cd45_sce_dropna)$hgnc_symbol == "na")
cd45_sce_dropna <- cd45_sce_dropna[which(Proteins_in_cd45),]
cd45_sce_dropna
table(colData(cd45_sce_dropna)$Health.Status)
table(colData(cd45_sce_dropna)$Clinical.Subtype)
cd45_sce_dropna <- cd45_sce_dropna[, colData(cd45_sce_dropna)$Clinical.Subtype == "TN"]
cd45_sce_dropna
#drop cells(columns) with no protein expression
cd45_sce_dropna <- cd45_sce_dropna[, colSums(assay(cd45_sce_dropna)) > 0]
cd45_sce_dropna
# drop levels of patient_id.x
colData(cd45_sce_dropna)$patient_id.x <- droplevels(colData(cd45_sce_dropna)$patient_id.x)
table(colData(cd45_sce_dropna)$Previous.Cancer.Incidences, colData(cd45_sce_dropna)$patient_id.x)
or <- order(rowMeans(assay(cd45_sce_dropna)),
decreasing=TRUE)
colData(cd45_sce_dropna)$cell_id <- paste0("cell_", seq(1, dim(cd45_sce_dropna)[2]))
colnames(cd45_sce_dropna) <- colData(cd45_sce_dropna)$cell_id
ass <- assay(cd45_sce_dropna)[or, sample(1:dim(cd45_sce_dropna)[2], 1000)]
df <- as.data.frame(colData(cd45_sce_dropna)[colnames(ass), c("Menopause.Status","HER2.IHC.Score", "patient_id.x","Previous.Cancer.Incidences","cell_id")])
df <- with(df, df[order(Previous.Cancer.Incidences, Menopause.Status, HER2.IHC.Score, patient_id.x, cell_id),])
ass <- ass[, df$cell_id]
df <- dplyr::select(df, -cell_id)
rownames(ass) <- rowData(cd45_sce_dropna)$marker_name[or]
p <- pheatmap(ass,
annotation_col = df,
cluster_rows = FALSE,
cluster_cols = FALSE,
fontsize_row = 14,
fontsize_col = 14,
show_colnames = FALSE)
ggsave("../Figures/cytof.png", p , width = 12, height = 10)
load('../Data/mibiSCE.rda')
mibi.sce
rowMeans(assay(mibi.sce))
rowSds(assay(mibi.sce))
rownames(mibi.sce)
# proteins <- rowData(mibi.sce)$is_protein == 1
# sum(proteins)
# mibi.sce_proteins <- mibi.sce[which(proteins),]
# mibi.sce_proteins
# rownames(mibi.sce_proteins)
mibi.sce_proteins <- mibi.sce[rowData(mibi.sce)$is_protein == 1,]
mibi.sce_proteins
rm(mibi.sce)
round(table(mibi.sce_proteins$tumor_group)/ncol(mibi.sce_proteins),2)
# Immune Cells
round(table(mibi.sce_proteins$immune_group)/ncol(mibi.sce_proteins),2)
table(colData(mibi.sce_proteins)$tumor_group)
table(colData(mibi.sce_proteins)$tumor_group, colData(mibi.sce_proteins)$immune_group)
mibi.sce_proteins <- mibi.sce_proteins[, colData(mibi.sce_proteins)$tumor_group %in% c("Immune", "Keratin-positive tumor")]
# colData(mibi.sce_proteins)$DONOR_NO <- colData(mibi.sce_proteins)$DONOR_NO %>% as.character()
# mibi <- mibi.sce_proteins[, colData(mibi.sce_proteins)$DONOR_NO %in% "30838"]
mibi <- mibi.sce_proteins
mibi
#drop cells(columns) with no protein expression
mibi <- mibi[, colSums(assay(mibi)) > 0]
mibi
#drop proteins(rows) with no expression in any of these cells
mibi <- mibi[rowSums(assay(mibi)) > 0, ]
mibi
summary(as.vector(assay(mibi)))
hist(as.vector(assay(mibi)), breaks = 100)
# remove cells with outlier expression
rm_outliers <- apply(assay(mibi), 2, function(x){ sum(abs(x) > 5) >= 1 })
sum(rm_outliers)
75208-26060
summary(as.vector(assay(mibi)))
hist(as.vector(assay(mibi)), breaks = 100)
# remove cells with outlier expression
rm_outliers <- apply(assay(mibi), 2, function(x){ sum(abs(x) > 5) >= 1 })
mibi <- mibi[, which(!rm_outliers)]
mibi
or <- order(rowMeans(assay(mibi)),
decreasing=TRUE)
colData(mibi)$cell_id <- paste0("mibi_", seq(1, dim(mibi)[2]))
colnames(mibi) <- colData(mibi)$cell_id
colData(mibi)$DONOR_NO <- colData(mibi)$DONOR_NO %>% as.character()
ass <- assay(mibi)[or, sample(1:dim(mibi)[2], 1000)]
df <- as.data.frame(colData(mibi)[colnames(ass), c("tumor_group", "immune_group","DONOR_NO","cell_id")])
df <- with(df, df[order(tumor_group, immune_group, DONOR_NO,cell_id),])
ass <- ass[, df$cell_id]
df <- dplyr::select(df, -cell_id)
rownames(ass) <- rownames(rowData(mibi))[or]
p <- pheatmap(ass,
annotation_col = df,
cluster_rows = FALSE,
cluster_cols = FALSE,
fontsize_row = 14,
fontsize_col = 14,
show_colnames = FALSE)
ggsave("../Figures/mibi_tof.png", p , width = 12, height = 10)
or <- order(rowMeans(assay(mibi)),
decreasing=TRUE)
colData(mibi)$cell_id <- paste0("mibi_", seq(1, dim(mibi)[2]))
colnames(mibi) <- colData(mibi)$cell_id
colData(mibi)$DONOR_NO <- colData(mibi)$DONOR_NO %>% as.character()
ass <- assay(mibi)[or, sample(1:dim(mibi)[2], 1000)]
df <- as.data.frame(colData(mibi)[colnames(ass), c("tumor_group", "immune_group","DONOR_NO","cell_id")])
df <- with(df, df[order(DONOR_NO, tumor_group, immune_group,cell_id), ])
ass <- ass[, df$cell_id]
df <- dplyr::select(df, -cell_id)
rownames(ass) <- rownames(rowData(mibi))[or]
p <- pheatmap(ass,
annotation_col = df,
cluster_rows = FALSE,
cluster_cols = FALSE,
fontsize_row = 14,
fontsize_col = 14,
show_colnames = FALSE)
ggsave("../Figures/mibi_tof.png", p , width = 12, height = 10)
unique(colData(mibi)$DONOR_NO)
library(raster)
getwd
getwd()
IMG <- '../Data/TNBC_shareCellData/p2_labeledcellData.tiff'
ras_obj <- raster(IMG)
install.packages("rgdal")
ras_obj <- raster(IMG)
ras_obj
strsplit(IMG,'/'
)
plot(ras_obj, main = strsplit(IMG,'/')[[1]][4])
2048^2
View(colData(mibi) %>% data.frame())
class(colData(mibi)$cellLabelInImage)
summary(colData(mibi)$cellLabelInImage)
#cell labels
ras_obj[1500:1510,1500:1510]
dim(ras_obj)
View(ras_obj)
View(ras_obj %>% as.matrix())
ras_obj[1,]
ras_obj[1000]
ras_obj[1000,]
dim(ras_obj)
View(ras_obj[,,1])
space_mat <- as.matrix(ras_obj)
View(space_mat)
space_mat[1530:1510,1530:1510]
space_mat[1510:1530,15100:1530]
space_mat[1510:1530,1510:1530]
ras_obj
res(ras_obj)
hasValues(ras_obj)
values(ras_obj)
ras_obj[2000:2010, 2000:2010]
ras_obj[300:310, 2000:2010]
values(ras_obj)[300:310, 2000:2010]
values(ras_obj)[300:310]
values(ras_obj)[300:350]
plot(ras_obj, main = strsplit(IMG,'/')[[1]][4])
ncell(ras_obj)
r <- raster(ncol=10, nrow=10)
values(r) <- 1:ncell(r)
r
View(as.matrix(r))
View(space_mat)
dim(ras_obj)
dim(space_mat )
View(space_mat[1:2048, 1:2048])
space_mat[2044:2048, 2044:2048]
s <- 1
tiff_name_list <- list.files("../Data/TNBC_shareCellData/", pattern = ".tiff")
tiff_name_list
s <- 1
str_name <- paste("../Data/TNBC_shareCellData/", tiff_name_list[s], sep = "")
sample_id <- as.numeric(gsub("p", "", gsub("_labeledcellData.tiff", "", tiff_name_list[s])))
sample_id
r <- raster(str_name)
r
install.packages("gstat")
library(gstat)
x1=1:20
x2=seq(0,0,length=20)
y=alpha+beta*x1+rnorm(20,0,sigmasq)
library(sp)
data(meuse)
meuse
View(meuse)
coordinates(meuse) = ~x+y
variogram(log(zinc)~1, meuse)
variogram(log(zinc)~x+y, meuse)
v = variogram(log(zinc)~x+y, meuse)
v.fit = fit.variogram(v, vgm(1, "Sph", 700, 1))
v.fit
set = list(gls=1)
v
data("meuse")
View(meuse)
plot(meuse$x, meuse$y)
#bubble chart to plot the zinc values
coordinates(meuse) <- ~x+y
bubble(meuse, zcol='zinc', fill=TRUE, do.sqrt=FALSE, maxsize=3)
bubble(meuse, zcol='zinc', fill=TRUE, do.sqrt=FALSE)
class(meuse)
bubble(meuse, zcol='zinc', fill=TRUE, do.sqrt=FALSE, identify = TRUE)
data(meuse)
class(meuse)
coordinates(meuse) <- c("x", "y") # promote to SpatialPointsDataFrame
bubble(meuse, "cadmium", maxsize = 2.5, main = "cadmium concentrations (ppm)",
key.entries = 2^(-1:4))
bubble(meuse, "zinc", main = "zinc concentrations (ppm)",
key.entries =  100 * 2^(0:4))
zin_variogram <- variogram(zinc~1, data=meuse)
plot(zin_variogram)
# we need to set sill, nudget, and range
#sill :maximum variance
#nugget: Theoretically, at zero separation distance (lag = 0), the semivariogram value is 0. However, at an infinitesimally small separation distance, the semivariogram often exhibits a nugget effect, which is some value greater than 0
#range: The distance h at which the unbiased estimate $\gamma(h)$ reaches the sill is called the range
zin_variogram_model <- vgm(psill=150000, model="Gau", nugget=40000, range=1500)
plot(zin_variogram, model= zin_variogram_model)
# we need to set sill, nudget, and range
#sill :maximum variance
#nugget: Theoretically, at zero separation distance (lag = 0), the semivariogram value is 0. However, at an infinitesimally small separation distance, the semivariogram often exhibits a nugget effect, which is some value greater than 0
#range: The distance h at which the unbiased estimate $\gamma(h)$ reaches the sill is called the range
zin_variogram_model <- vgm(psill=150000, model="Exp", nugget=40000, range=1500)# model="Gau", "Exp", "Sph", "Mat"
plot(zin_variogram, model= zin_variogram_model)
# we need to set sill, nudget, and range
#sill :maximum variance
#nugget: Theoretically, at zero separation distance (lag = 0), the semivariogram value is 0. However, at an infinitesimally small separation distance, the semivariogram often exhibits a nugget effect, which is some value greater than 0
#range: The distance h at which the unbiased estimate $\gamma(h)$ reaches the sill is called the range
zin_variogram_model <- vgm(psill=150000, model="Exp", nugget=40000, range=1000)# model="Gau", "Exp", "Sph", "Mat"
plot(zin_variogram, model= zin_variogram_model)
# we need to set sill, nudget, and range
#sill :maximum variance
#nugget: Theoretically, at zero separation distance (lag = 0), the semivariogram value is 0. However, at an infinitesimally small separation distance, the semivariogram often exhibits a nugget effect, which is some value greater than 0
#range: The distance h at which the unbiased estimate $\gamma(h)$ reaches the sill is called the range
zin_variogram_model <- vgm(psill=150000, model="Exp", nugget=40000, range=800)# model="Gau", "Exp", "Sph", "Mat"
plot(zin_variogram, model= zin_variogram_model)
# we need to set sill, nudget, and range
#sill :maximum variance
#nugget: Theoretically, at zero separation distance (lag = 0), the semivariogram value is 0. However, at an infinitesimally small separation distance, the semivariogram often exhibits a nugget effect, which is some value greater than 0
#range: The distance h at which the unbiased estimate $\gamma(h)$ reaches the sill is called the range
zin_variogram_model <- vgm(psill=150000, model="Sph", nugget=40000, range=800)# model="Gau", "Exp", "Sph", "Mat"
plot(zin_variogram, model= zin_variogram_model)
# we need to set sill, nudget, and range
#sill :maximum variance
#nugget: Theoretically, at zero separation distance (lag = 0), the semivariogram value is 0. However, at an infinitesimally small separation distance, the semivariogram often exhibits a nugget effect, which is some value greater than 0
#range: The distance h at which the unbiased estimate $\gamma(h)$ reaches the sill is called the range
zin_variogram_model <- vgm(psill=150000, model="Sph", nugget=40000, range=1000)# model="Gau", "Exp", "Sph", "Mat"
plot(zin_variogram, model= zin_variogram_model)
# we need to set sill, nudget, and range
#sill :maximum variance
#nugget: Theoretically, at zero separation distance (lag = 0), the semivariogram value is 0. However, at an infinitesimally small separation distance, the semivariogram often exhibits a nugget effect, which is some value greater than 0
#range: The distance h at which the unbiased estimate $\gamma(h)$ reaches the sill is called the range
zin_variogram_model <- vgm(psill=150000, model="Sph", nugget=40000, range=1200)# model="Gau", "Exp", "Sph", "Mat"
plot(zin_variogram, model= zin_variogram_model)
# we need to set sill, nudget, and range
#sill :maximum variance
#nugget: Theoretically, at zero separation distance (lag = 0), the semivariogram value is 0. However, at an infinitesimally small separation distance, the semivariogram often exhibits a nugget effect, which is some value greater than 0
#range: The distance h at which the unbiased estimate $\gamma(h)$ reaches the sill is called the range
zin_variogram_model <- vgm(psill=150000, model="Gau", nugget=40000, range=1200)# model="Gau", "Exp", "Sph", "Mat"
plot(zin_variogram, model= zin_variogram_model)
# we need to set sill, nudget, and range
#sill :maximum variance
#nugget: Theoretically, at zero separation distance (lag = 0), the semivariogram value is 0. However, at an infinitesimally small separation distance, the semivariogram often exhibits a nugget effect, which is some value greater than 0
#range: The distance h at which the unbiased estimate $\gamma(h)$ reaches the sill is called the range
zin_variogram_model <- vgm(psill=150000, model="Mat", nugget=40000, range=1200)# model="Gau", "Exp", "Sph", "Mat"
plot(zin_variogram, model= zin_variogram_model)
# we need to set sill, nudget, and range
#sill :maximum variance
#nugget: Theoretically, at zero separation distance (lag = 0), the semivariogram value is 0. However, at an infinitesimally small separation distance, the semivariogram often exhibits a nugget effect, which is some value greater than 0
#range: The distance h at which the unbiased estimate $\gamma(h)$ reaches the sill is called the range
zin_variogram_model <- vgm(psill=150000, model="Mat", nugget=40000, range=800)# model="Gau", "Exp", "Sph", "Mat"
plot(zin_variogram, model= zin_variogram_model)
# we need to set sill, nudget, and range
#sill :maximum variance
#nugget: Theoretically, at zero separation distance (lag = 0), the semivariogram value is 0. However, at an infinitesimally small separation distance, the semivariogram often exhibits a nugget effect, which is some value greater than 0
#range: The distance h at which the unbiased estimate $\gamma(h)$ reaches the sill is called the range
zin_variogram_model <- vgm(psill=150000, model="Sph", nugget=40000, range=1000)# model="Gau", "Exp", "Sph", "Mat"
plot(zin_variogram, model= zin_variogram_model)
# we need to set sill, nudget, and range
#sill :maximum variance
#nugget: Theoretically, at zero separation distance (lag = 0), the semivariogram value is 0. However, at an infinitesimally small separation distance, the semivariogram often exhibits a nugget effect, which is some value greater than 0
#range: The distance h at which the unbiased estimate $\gamma(h)$ reaches the sill is called the range
zin_variogram_model <- vgm(psill=150000, model="Sph", nugget=40000, range=1500)# model="Gau", "Exp", "Sph", "Mat"
plot(zin_variogram, model= zin_variogram_model)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE,
fig.width = 10,
fig.height = 10)
#library(flowCore)
library(SingleCellExperiment)
library(ggplot2)
# library(rstan)
#library(scater)
library(plyr)
library(reshape2)
library(readr)
#library(CATALYST)
library(magrittr)
#library(scMerge)
library(MultiAssayExperiment)
library(dplyr)
library(DESeq2)
library(abind)
library(tibble)
library(RColorBrewer)
library(igraph)
library(raster)
library(spdep)
library(stars)
library(stringr)
library(pheatmap)
library(raster)
# load("../Data/masstagSCE.rda")
# cd45.sce # 38 * 426872
# rm(epith.sce, livecells.sce, myeloid.sce, tcell.sce)
# unique(colData(cd45.sce)$patient_id.y[which(is.na(colData(cd45.sce)$Gender))])
# cd45_to_keep <- which(!is.na(colData(cd45.sce)$Gender))
# cd45.sce_dropna <- cd45.sce[,cd45_to_keep]
# cd45.sce_dropna # 38 * 420685
# # To verify there are no (true) NA's left:
# sum(is.na(rowData(cd45.sce_dropna)))
# rm(cd45.sce, cd45_to_keep)
#saveRDS(cd45.sce_dropna, "../Data/cd45_sce_dropna.rds")
cd45_sce_dropna <- readRDS("../Data/cd45_sce_dropna.rds")
cd45_sce_dropna
Proteins_in_cd45 <- !(rowData(cd45_sce_dropna)$hgnc_symbol == "na")
cd45_sce_dropna <- cd45_sce_dropna[which(Proteins_in_cd45),]
cd45_sce_dropna
table(colData(cd45_sce_dropna)$Health.Status)
table(colData(cd45_sce_dropna)$Clinical.Subtype)
cd45_sce_dropna <- cd45_sce_dropna[, colData(cd45_sce_dropna)$Clinical.Subtype == "TN"]
cd45_sce_dropna
#drop cells(columns) with no protein expression
cd45_sce_dropna <- cd45_sce_dropna[, colSums(assay(cd45_sce_dropna)) > 0]
cd45_sce_dropna
# drop levels of patient_id.x
colData(cd45_sce_dropna)$patient_id.x <- droplevels(colData(cd45_sce_dropna)$patient_id.x)
table(colData(cd45_sce_dropna)$Previous.Cancer.Incidences, colData(cd45_sce_dropna)$patient_id.x)
or <- order(rowMeans(assay(cd45_sce_dropna)),
decreasing=TRUE)
colData(cd45_sce_dropna)$cell_id <- paste0("cell_", seq(1, dim(cd45_sce_dropna)[2]))
colnames(cd45_sce_dropna) <- colData(cd45_sce_dropna)$cell_id
ass <- assay(cd45_sce_dropna)[or, sample(1:dim(cd45_sce_dropna)[2], 1000)]
df <- as.data.frame(colData(cd45_sce_dropna)[colnames(ass), c("Menopause.Status","HER2.IHC.Score", "patient_id.x","Previous.Cancer.Incidences","cell_id")])
df <- with(df, df[order(Previous.Cancer.Incidences, Menopause.Status, HER2.IHC.Score, patient_id.x, cell_id),])
ass <- ass[, df$cell_id]
df <- dplyr::select(df, -cell_id)
rownames(ass) <- rowData(cd45_sce_dropna)$marker_name[or]
p <- pheatmap(ass,
annotation_col = df,
cluster_rows = FALSE,
cluster_cols = FALSE,
fontsize_row = 14,
fontsize_col = 14,
show_colnames = FALSE)
ggsave("../Figures/cytof.png", p , width = 12, height = 10)
load('../Data/mibiSCE.rda')
mibi.sce
rowMeans(assay(mibi.sce))
rowSds(assay(mibi.sce))
rownames(mibi.sce)
# proteins <- rowData(mibi.sce)$is_protein == 1
# sum(proteins)
# mibi.sce_proteins <- mibi.sce[which(proteins),]
# mibi.sce_proteins
# rownames(mibi.sce_proteins)
mibi.sce_proteins <- mibi.sce[rowData(mibi.sce)$is_protein == 1,]
mibi.sce_proteins
rm(mibi.sce)
round(table(mibi.sce_proteins$tumor_group)/ncol(mibi.sce_proteins),2)
# Immune Cells
round(table(mibi.sce_proteins$immune_group)/ncol(mibi.sce_proteins),2)
table(colData(mibi.sce_proteins)$tumor_group)
table(colData(mibi.sce_proteins)$tumor_group, colData(mibi.sce_proteins)$immune_group)
mibi.sce_proteins <- mibi.sce_proteins[, colData(mibi.sce_proteins)$tumor_group %in% c("Immune", "Keratin-positive tumor")]
# colData(mibi.sce_proteins)$DONOR_NO <- colData(mibi.sce_proteins)$DONOR_NO %>% as.character()
# mibi <- mibi.sce_proteins[, colData(mibi.sce_proteins)$DONOR_NO %in% "30838"]
mibi <- mibi.sce_proteins
mibi
#drop cells(columns) with no protein expression
mibi <- mibi[, colSums(assay(mibi)) > 0]
mibi
#drop proteins(rows) with no expression in any of these cells
mibi <- mibi[rowSums(assay(mibi)) > 0, ]
mibi
summary(as.vector(assay(mibi)))
hist(as.vector(assay(mibi)), breaks = 100)
# remove cells with outlier expression
rm_outliers <- apply(assay(mibi), 2, function(x){ sum(abs(x) > 5) >= 1 })
mibi <- mibi[, which(!rm_outliers)]
mibi
or <- order(rowMeans(assay(mibi)),
decreasing=TRUE)
colData(mibi)$cell_id <- paste0("mibi_", seq(1, dim(mibi)[2]))
colnames(mibi) <- colData(mibi)$cell_id
colData(mibi)$DONOR_NO <- colData(mibi)$DONOR_NO %>% as.character()
ass <- assay(mibi)[or, sample(1:dim(mibi)[2], 1000)]
df <- as.data.frame(colData(mibi)[colnames(ass), c("DONOR_NO", "tumor_group", "immune_group","cell_id")])
df <- with(df, df[order(DONOR_NO, tumor_group, immune_group,cell_id), ])
ass <- ass[, df$cell_id]
df <- dplyr::select(df, -cell_id)
rownames(ass) <- rownames(rowData(mibi))[or]
p <- pheatmap(ass,
annotation_col = df,
cluster_rows = FALSE,
cluster_cols = FALSE,
fontsize_row = 14,
fontsize_col = 14,
show_colnames = FALSE)
ggsave("../Figures/mibi_tof.png", p , width = 12, height = 10)
table(colData(mibi)$tumor_group, colData(mibi)$DONOR_NO)
data(meuse)
plot(meuse$x, meuse$y)
View(meuse)
#bubble chart to plot the zinc values
coordinates(meuse) <- c("x", "y")
bubble(meuse, zcol='zinc', fill=TRUE, do.sqrt=FALSE)
zin_variogram <- variogram(zinc~1, data=meuse)
plot(zin_variogram)
# directional variogram
zinc_dir_var <- variogram(zinc~1, loc=~x+y, data=meuse,
alpha=c(0,45,90,135))
# directional variogram
zinc_dir_var <- variogram(zinc~1,  data=meuse,
alpha=c(0,45,90,135))
plot(zinc_dir_var)
