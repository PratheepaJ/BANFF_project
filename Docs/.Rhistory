library(gridExtra)
grid.arrange(p1, p22, nrow = 1)
grid.arrange(p1, arrangeGrob(p22, p23, ncol=1))
grid.arrange(p1, arrangeGrob(p22, p23, ncol=1), ncol=2,)
grid.arrange(p1, arrangeGrob(p22, p23, ncol=1), ncol=2)
p1 <- ggplot(data = umap_df,
aes(x = UMAP1, y = UMAP2, color = cell_type)) +
geom_point(size = 5) +
theme_bw() +
scale_color_manual(values = manual_col) +
theme(aspect.ratio = 1, title = element_text(hjust = 0.5)) +
labs(color = "Cell types") + ggtitle("UMAP with measured proteins")
p1
p1 <- ggplot(data = umap_df,
aes(x = UMAP1, y = UMAP2, color = cell_type)) +
geom_point(size = 5) +
theme_bw() +
scale_color_manual(values = manual_col)  +
labs(color = "Cell types") +
ggtitle("UMAP with measured proteins") +
theme(aspect.ratio = 1, title = element_text(hjust = 0.5))
p1
p1 <- ggplot(data = umap_df,
aes(x = UMAP1, y = UMAP2, color = cell_type)) +
geom_point(size = 5) +
theme_bw() +
scale_color_manual(values = manual_col)  +
labs(color = "Cell types") +
ggtitle("UMAP with measured proteins") +
theme(aspect.ratio = 1, plot.title = element_text(hjust = 0.5))
p1
com_p <- grid.arrange(p1, arrangeGrob(p22, p23, ncol=1), ncol=2)
ggsave("../Figures/predicted_mibi_protein.png", com_p, width = 10, height = 8)
ggsave("../Figures/predicted_mibi_protein.png", com_p, width = 15, height = 10)
proteins_not_measured_mibi <- rowData(mae[["cd45"]])$marker_name[!(as.character(rowData(mae[["cd45"]])$marker_name) %in% as.character(rowData(mae[["mibi"]])$channel_name))] %>% as.character()
# Simulated data
x_sim <- samples$x_sim # iteration * samples * ASVs
# Choose only the first chain
x_sim <- x_sim[1, ,] # For each iteration, simulated data
colnames(x_sim) <- colnames(x_train)
rownames(x_train) <- rownames(x_train)
ind_mibi <- which(rownames(x_train) %in% colnames(assay(mae_train[["mibi"]])))
x_sim_mibi <- x_sim[ind_mibi, ]
ind_pro <- which(colnames(x_train) %in% proteins_not_measured_mibi)
ind_pro_present <- which(!(colnames(x_train) %in% proteins_not_measured_mibi))
x_sim_mibi_only_measured <- x_train[ind_mibi, ind_pro_present]
x_sim_mibi_only_measured_t <- asinh(x_sim_mibi_only_measured)
x_sim_mibi_predict <- x_sim_mibi
x_sim_mibi_predict_t <- asinh(x_sim_mibi_predict)
library(uwot)
# UMAP of measured proteins
mibi_umap <- umap(x_sim_mibi_only_measured_t)
umap_df <- data.frame(UMAP1 = mibi_umap[,1],
UMAP2 = mibi_umap[,2],
cell_id = colData(mae_train)$cell_id[ind_mibi])
mibi_cell_data <- colData(mae_train)[ind_mibi, ] %>% data.frame()
umap_df  <- left_join(umap_df, mibi_cell_data, by = "cell_id")
manual_col <- tableau_color_pal("Classic 20")(length(unique(mae_train$cell_type)))
p1 <- ggplot(data = umap_df,
aes(x = UMAP1, y = UMAP2, color = cell_type)) +
geom_point(size = 3) +
theme_bw() +
scale_color_manual(values = manual_col)  +
labs(color = "Cell types") +
ggtitle("UMAP with measured proteins") +
theme(aspect.ratio = 1, plot.title = element_text(hjust = 0.5))
p1
# UMAP of measured and predicted protein
# UMAP of measured proteins
mibi_umap <- umap(x_sim_mibi_predict_t)
umap_df <- data.frame(UMAP1 = mibi_umap[,1],
UMAP2 = mibi_umap[,2],
cell_id = colData(mae_train)$cell_id[ind_mibi])
mibi_cell_data <- colData(mae_train)[ind_mibi, ] %>% data.frame()
umap_df  <- left_join(umap_df, mibi_cell_data, by = "cell_id")
manual_col <- tableau_color_pal("Classic 20")(length(unique(mae_train$cell_type)))
p2 <- ggplot(data = umap_df,
aes(x = UMAP1, y = UMAP2, color = cell_type)) +
geom_point(size = 3) +
theme_bw() +
scale_color_manual(values = manual_col) +
theme(aspect.ratio = 1) +
labs(color = "Cell types")
p2
# Simulated data
x_sim <- samples$x_sim # iteration * samples * ASVs
# Choose only the first chain
x_sim <- x_sim[4, ,] # For each iteration, simulated data
colnames(x_sim) <- colnames(x_train)
rownames(x_train) <- rownames(x_train)
ind_mibi <- which(rownames(x_train) %in% colnames(assay(mae_train[["mibi"]])))
x_sim_mibi <- x_sim[ind_mibi, ]
ind_pro <- which(colnames(x_train) %in% proteins_not_measured_mibi)
ind_pro_present <- which(!(colnames(x_train) %in% proteins_not_measured_mibi))
x_sim_mibi_only_measured <- x_train[ind_mibi, ind_pro_present]
x_sim_mibi_only_measured_t <- asinh(x_sim_mibi_only_measured)
x_sim_mibi_predict <- x_sim_mibi
x_sim_mibi_predict_t <- asinh(x_sim_mibi_predict)
library(uwot)
# UMAP of measured proteins
mibi_umap <- umap(x_sim_mibi_only_measured_t)
umap_df <- data.frame(UMAP1 = mibi_umap[,1],
UMAP2 = mibi_umap[,2],
cell_id = colData(mae_train)$cell_id[ind_mibi])
mibi_cell_data <- colData(mae_train)[ind_mibi, ] %>% data.frame()
umap_df  <- left_join(umap_df, mibi_cell_data, by = "cell_id")
manual_col <- tableau_color_pal("Classic 20")(length(unique(mae_train$cell_type)))
p11 <- ggplot(data = umap_df,
aes(x = UMAP1, y = UMAP2, color = cell_type)) +
geom_point(size = 3) +
theme_bw() +
scale_color_manual(values = manual_col) +
theme(aspect.ratio = 1) +
labs(color = "Cell types")
p11
# UMAP of measured and predicted protein
# UMAP of measured proteins
mibi_umap <- umap(x_sim_mibi_predict_t)
umap_df <- data.frame(UMAP1 = mibi_umap[,1],
UMAP2 = mibi_umap[,2],
cell_id = colData(mae_train)$cell_id[ind_mibi])
mibi_cell_data <- colData(mae_train)[ind_mibi, ] %>% data.frame()
umap_df  <- left_join(umap_df, mibi_cell_data, by = "cell_id")
manual_col <- tableau_color_pal("Classic 20")(length(unique(mae_train$cell_type)))
p22 <- ggplot(data = umap_df,
aes(x = UMAP1, y = UMAP2, color = cell_type)) +
geom_point(size = 3) +
theme_bw() +
scale_color_manual(values = manual_col) +
theme(aspect.ratio = 1) +
labs(color = "Cell types")
p22
# Simulated data
x_sim <- samples$x_sim # iteration * samples * ASVs
# Choose only the first chain
x_sim <- x_sim[2, ,] # For each iteration, simulated data
colnames(x_sim) <- colnames(x_train)
rownames(x_train) <- rownames(x_train)
ind_mibi <- which(rownames(x_train) %in% colnames(assay(mae_train[["mibi"]])))
x_sim_mibi <- x_sim[ind_mibi, ]
ind_pro <- which(colnames(x_train) %in% proteins_not_measured_mibi)
ind_pro_present <- which(!(colnames(x_train) %in% proteins_not_measured_mibi))
x_sim_mibi_only_measured <- x_train[ind_mibi, ind_pro_present]
x_sim_mibi_only_measured_t <- asinh(x_sim_mibi_only_measured)
x_sim_mibi_predict <- x_sim_mibi
x_sim_mibi_predict_t <- asinh(x_sim_mibi_predict)
library(uwot)
# UMAP of measured proteins
mibi_umap <- umap(x_sim_mibi_only_measured_t)
umap_df <- data.frame(UMAP1 = mibi_umap[,1],
UMAP2 = mibi_umap[,2],
cell_id = colData(mae_train)$cell_id[ind_mibi])
mibi_cell_data <- colData(mae_train)[ind_mibi, ] %>% data.frame()
umap_df  <- left_join(umap_df, mibi_cell_data, by = "cell_id")
manual_col <- tableau_color_pal("Classic 20")(length(unique(mae_train$cell_type)))
p13 <- ggplot(data = umap_df,
aes(x = UMAP1, y = UMAP2, color = cell_type)) +
geom_point(size = 3) +
theme_bw() +
scale_color_manual(values = manual_col) +
theme(aspect.ratio = 1) +
labs(color = "Cell types")
p13
# UMAP of measured and predicted protein
# UMAP of measured proteins
mibi_umap <- umap(x_sim_mibi_predict_t)
umap_df <- data.frame(UMAP1 = mibi_umap[,1],
UMAP2 = mibi_umap[,2],
cell_id = colData(mae_train)$cell_id[ind_mibi])
mibi_cell_data <- colData(mae_train)[ind_mibi, ] %>% data.frame()
umap_df  <- left_join(umap_df, mibi_cell_data, by = "cell_id")
manual_col <- tableau_color_pal("Classic 20")(length(unique(mae_train$cell_type)))
p23 <- ggplot(data = umap_df,
aes(x = UMAP1, y = UMAP2, color = cell_type)) +
geom_point(size = 3) +
theme_bw() +
scale_color_manual(values = manual_col) +
theme(aspect.ratio = 1) +
labs(color = "Cell types")
p23
# library(gtable)
# library(grid)
# g1 <- ggplotGrob(p1)
# g2 <-  ggplotGrob(p22)
# g3 <- ggplotGrob(p23)
# g <- cbind(g1, g2)
#
# g$widths <- unit.pmax(g1$widths, g2$widths)
# grid.newpage()
# grid.draw(g)
library(gridExtra)
com_p <- grid.arrange(p1, arrangeGrob(p22, p23, ncol=1), ncol=2)
ggsave("../Figures/predicted_mibi_protein.png", com_p, width = 15, height = 10)
com_p <- grid.arrange(p1, arrangeGrob(p22, p23, ncol=1), ncol=2), widths=c(1,1.2)
com_p <- grid.arrange(p1, arrangeGrob(p22, p23, ncol=1), ncol=2), widths=c(1,1.2)
com_p <- grid.arrange(p1, arrangeGrob(p22, p23, ncol=1), ncol=2, widths=c(1,1.2))
ggsave("../Figures/predicted_mibi_protein.png", com_p, width = 15, height = 10)
ggsave("../Figures/predicted_mibi_protein.png", com_p, width = 20, height = 10)
ggsave("../Figures/predicted_mibi_protein.png", com_p, width = 20, height = 15)
# Simulated data
x_sim <- samples$x_sim # iteration * samples * ASVs
# Choose only the first chain
x_sim <- x_sim[4, ,] # For each iteration, simulated data
colnames(x_sim) <- colnames(x_train)
rownames(x_train) <- rownames(x_train)
ind_mibi <- which(rownames(x_train) %in% colnames(assay(mae_train[["mibi"]])))
x_sim_mibi <- x_sim[ind_mibi, ]
ind_pro <- which(colnames(x_train) %in% proteins_not_measured_mibi)
ind_pro_present <- which(!(colnames(x_train) %in% proteins_not_measured_mibi))
x_sim_mibi_only_measured <- x_train[ind_mibi, ind_pro_present]
x_sim_mibi_only_measured_t <- asinh(x_sim_mibi_only_measured)
x_sim_mibi_predict <- x_sim_mibi
x_sim_mibi_predict_t <- asinh(x_sim_mibi_predict)
library(uwot)
# UMAP of measured proteins
mibi_umap <- umap(x_sim_mibi_only_measured_t)
umap_df <- data.frame(UMAP1 = mibi_umap[,1],
UMAP2 = mibi_umap[,2],
cell_id = colData(mae_train)$cell_id[ind_mibi])
mibi_cell_data <- colData(mae_train)[ind_mibi, ] %>% data.frame()
umap_df  <- left_join(umap_df, mibi_cell_data, by = "cell_id")
manual_col <- tableau_color_pal("Classic 20")(length(unique(mae_train$cell_type)))
p11 <- ggplot(data = umap_df,
aes(x = UMAP1, y = UMAP2, color = cell_type)) +
geom_point(size = 3) +
theme_bw() +
scale_color_manual(values = manual_col) +
theme(aspect.ratio = 1) +
labs(color = "Cell types")
p11
# UMAP of measured and predicted protein
# UMAP of measured proteins
mibi_umap <- umap(x_sim_mibi_predict_t)
umap_df <- data.frame(UMAP1 = mibi_umap[,1],
UMAP2 = mibi_umap[,2],
cell_id = colData(mae_train)$cell_id[ind_mibi])
mibi_cell_data <- colData(mae_train)[ind_mibi, ] %>% data.frame()
umap_df  <- left_join(umap_df, mibi_cell_data, by = "cell_id")
manual_col <- tableau_color_pal("Classic 20")(length(unique(mae_train$cell_type)))
p22 <- ggplot(data = umap_df,
aes(x = UMAP1, y = UMAP2, color = cell_type)) +
geom_point(size = 3) +
theme_bw() +
scale_color_manual(values = manual_col) +
labs(color = "Cell types") +
ggtitle("UMAP with measured and predicted proteins") +
theme(aspect.ratio = 1, plot.title = element_text(hjust = 0.5))
p22
# Simulated data
x_sim <- samples$x_sim # iteration * samples * ASVs
# Choose only the first chain
x_sim <- x_sim[2, ,] # For each iteration, simulated data
colnames(x_sim) <- colnames(x_train)
rownames(x_train) <- rownames(x_train)
ind_mibi <- which(rownames(x_train) %in% colnames(assay(mae_train[["mibi"]])))
x_sim_mibi <- x_sim[ind_mibi, ]
ind_pro <- which(colnames(x_train) %in% proteins_not_measured_mibi)
ind_pro_present <- which(!(colnames(x_train) %in% proteins_not_measured_mibi))
x_sim_mibi_only_measured <- x_train[ind_mibi, ind_pro_present]
x_sim_mibi_only_measured_t <- asinh(x_sim_mibi_only_measured)
x_sim_mibi_predict <- x_sim_mibi
x_sim_mibi_predict_t <- asinh(x_sim_mibi_predict)
library(uwot)
# UMAP of measured proteins
mibi_umap <- umap(x_sim_mibi_only_measured_t)
umap_df <- data.frame(UMAP1 = mibi_umap[,1],
UMAP2 = mibi_umap[,2],
cell_id = colData(mae_train)$cell_id[ind_mibi])
mibi_cell_data <- colData(mae_train)[ind_mibi, ] %>% data.frame()
umap_df  <- left_join(umap_df, mibi_cell_data, by = "cell_id")
manual_col <- tableau_color_pal("Classic 20")(length(unique(mae_train$cell_type)))
p13 <- ggplot(data = umap_df,
aes(x = UMAP1, y = UMAP2, color = cell_type)) +
geom_point(size = 3) +
theme_bw() +
scale_color_manual(values = manual_col) +
theme(aspect.ratio = 1) +
labs(color = "Cell types")
p13
# UMAP of measured and predicted protein
# UMAP of measured proteins
mibi_umap <- umap(x_sim_mibi_predict_t)
umap_df <- data.frame(UMAP1 = mibi_umap[,1],
UMAP2 = mibi_umap[,2],
cell_id = colData(mae_train)$cell_id[ind_mibi])
mibi_cell_data <- colData(mae_train)[ind_mibi, ] %>% data.frame()
umap_df  <- left_join(umap_df, mibi_cell_data, by = "cell_id")
manual_col <- tableau_color_pal("Classic 20")(length(unique(mae_train$cell_type)))
p23 <- ggplot(data = umap_df,
aes(x = UMAP1, y = UMAP2, color = cell_type)) +
geom_point(size = 3) +
theme_bw() +
scale_color_manual(values = manual_col) +
labs(color = "Cell types")+
ggtitle("UMAP with measured and predicted proteins") +
theme(aspect.ratio = 1, plot.title = element_text(hjust = 0.5))
p23
# library(gtable)
# library(grid)
# g1 <- ggplotGrob(p1)
# g2 <-  ggplotGrob(p22)
# g3 <- ggplotGrob(p23)
# g <- cbind(g1, g2)
#
# g$widths <- unit.pmax(g1$widths, g2$widths)
# grid.newpage()
# grid.draw(g)
library(gridExtra)
com_p <- grid.arrange(p1, arrangeGrob(p22, p23, ncol=1), ncol=2, widths=c(1,1.2))
ggsave("../Figures/predicted_mibi_protein.png", com_p, width = 20, height = 15)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE,
fig.width = 20,
fig.height = 15)
K <- params$K
K
iter <- params$R
iter
library(SingleCellExperiment)
library(ggplot2)
library(rstan)
library(plyr)
library(reshape2)
library(readr)
library(magrittr)
library(MultiAssayExperiment)
library(dplyr)
library(DESeq2)
library(abind)
library(tibble)
library(RColorBrewer)
library(raster)
library(stringr)
library(ggthemes)
library(pheatmap)
library(gtools)
mae <- readRDS("../Results/mae_mibi_cytof_one.rds")
x1 <- assay(mae[["cd45"]]) %>% t() %>% data.frame()
x2 <- assay(mae[["mibi"]]) %>% t() %>%  data.frame()
x <-  full_join(x1, x2)
markers <- colnames(x)
cells <- c(rownames(x1), rownames(x2))
common_markers <- colnames(x1)[colnames(x1) %in% colnames(x2)]
common_markers
#rm(x1,x2)
# some features are not recorded in one domain - impute data after scaling
colMissing <- apply(x, 2, function(y){mean(is.na(y))})
temp <- x %>% as.matrix() %>% t()
rm(x1, x2)
imdata <- readRDS("../Results/imdata_mibi_cytof_one.rds")
x <- imdata %>% t()
rownames(x) <- cells
rm(imdata, temp)
test_samples <- readRDS("../Results/test_samples_one_mibi_one_cytof.rds")
x_test_train <- x
x_test <- x[test_samples, ]
x_test <- apply(x_test , c(1,2), function(y){as.integer(y)})
x_test <- as.matrix(x_test)
mae_test <- mae[, test_samples,]
x_train <- x[!(rownames(x) %in% test_samples), ]
x_train <- apply(x_train , c(1,2), function(y){as.integer(y)})
x_train <- as.matrix(x_train)
mae_train <- mae[, which(!(rownames(x) %in% test_samples)),]
fileN <- paste0("../Results/LDA_mibi_cytof_one_K_",K,"_ite_",iter,".RData")
fileN
load(file = fileN)
sampler_params <- get_sampler_params(stan.fit,
inc_warmup = FALSE)
colnames(sampler_params[[1]])
mean_accept_stat_by_chain <- sapply(sampler_params,
function(x) mean(x[, "accept_stat__"]))
mean_accept_stat_by_chain
max_treedepth_by_chain <- sapply(sampler_params,
function(x) max(x[, "treedepth__"]))
max_treedepth_by_chain
samples <- rstan::extract(stan.fit,
permuted = TRUE,
inc_warmup = FALSE,
include = TRUE)# samples is a list
rm(stan.fit)
source("../R_BANF/alignmentMatrixMAE.R")
source("../R_BANF/thetaAligned.R")
theta <- samples$theta
# theta <- theta[c(1:25, 51:75, 101:125, 151:175) , , ]
# aligned <- alignmentMatrixMAE(theta,
#                            mae_train,
#                            K,
#                            iter = iter,
#                            chain = 4,
#                            SampleID_name = "cell_id")
# theta_aligned <- thetaAligned(theta,
#                               K,
#                               aligned,
#                               iter = iter,
#                               chain = 4)
theta_aligned <- theta[1:(iter/2), ,]
dimnames(theta_aligned)[[2]] <- mae_train$cell_id
dimnames(theta_aligned)[[3]] <- c(paste0("Topic_", seq(1,K)))
# array to a dataframe
theta_all <- melt(theta_aligned)
colnames(theta_all) <- c("iteration", "Sample", "Topic", "topic.dis")
theta_all$Chain <- paste0("Chain ", rep(seq(1, 1), each = (iter/2)))
sam <- colData(mae_train) %>% data.frame()
theta_all$Sample <- as.character(theta_all$Sample)
theta_all <- left_join(theta_all, sam, by =c("Sample"= "cell_id"))
theta_all$Chain <- factor(theta_all$Chain)
theta_all$Topic <- factor(theta_all$Topic)
theta_all$Sample <- factor(theta_all$Sample)
theta_all$cell_type <- factor(theta_all$cell_type)
theta_all$method <- ifelse(is.na(theta_all$cell_type), "cytof", as.character(theta_all$cell_type))
manual_col <- tableau_color_pal("Classic 20")(length(unique(theta_all$method)))
theta_summary <- theta_all %>%
group_by(Sample, Topic, method) %>%
summarize(median.topic.dis = median(topic.dis)) %>%
ungroup() %>%
mutate(Topic = factor(Topic, levels = rev(str_c("Topic_",1:K))))
#theta_summary <- dplyr::filter(theta_summary, cell_type %in% c("Macrophages", "Tumor"))
sample_cells <- unique(theta_summary$Sample)
sample_cells_select <- sample(sample_cells, 50)
theta_summary <- dplyr::filter(theta_summary,
Sample %in% sample_cells_select)
p <- ggplot(theta_summary,
aes(x = method,
y = Topic,
fill = method))
p <- p+
geom_tile(aes(alpha = median.topic.dis))+
facet_grid(.~Sample, scale = "free")+
xlab("method") +
scale_fill_manual(name = "method",
values = manual_col) +
scale_alpha(name = "median topic distribution") +
theme_minimal(base_size = 20) +
theme(plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(angle = 90),
axis.text.x=element_blank())
p
ggsave(paste0("../Figures/topic_dis_mibi_cytof_one_K_",K, ".png"), p, width = 20, height = 10)
rm( p)
source("../R_BANF/betaAligned.R")
beta <- samples$beta # an array (iterations *topic * marker)
# beta_aligned <- betaAligned(beta,
#                             K,
#                             aligned,
#                             iter = iter,
#                             chain = 4) # an array (iterations *topic * ASV)
beta_aligned <- beta[1:(iter/2), , ]
# array to data frame
beta_hat <- beta_aligned %>%
melt(varnames = c("iterations", "topic", "marker_ix"),
value.name = "beta_h") %>% as_tibble()
beta_hat$marker <- colnames(x_train)[beta_hat$marker_ix]
# join rowData with beta_hat
marker_info <- full_join(rowData(mae_train[["cd45"]]) %>% data.frame(), rowData(mae_train[["mibi"]]) %>% data.frame())
marker_info$marker <- marker_info$marker_name
beta_hat <- beta_hat %>%
left_join(marker_info, by = "marker") %>% mutate(topic = paste("Topic", topic))
beta_hat$marker <- factor(beta_hat$marker)
beta_hat$marker_ix <- factor(beta_hat$marker_ix)
beta_hat$topic <- factor(beta_hat$topic)
beta_summary <- beta_hat %>%
dplyr::group_by(marker_ix, topic) %>%
dplyr::summarise(
marker = marker[1],
beta_median = median(beta_h),
marker = marker[1],
hgnc_symbol = hgnc_symbol[1]
)
beta_subset <- beta_summary
beta_subset$marker_ix <- rep(seq_len(nrow(beta_subset) / K), each = K)
rm(beta_summary, beta_hat)
beta_subset <- beta_subset %>%
arrange(marker_ix, topic)
beta_subset <- beta_subset %>%
mutate(Class = factor(marker, levels = unique(beta_subset$marker)),
Topic = str_remove(topic, "Topic "))
beta_subset$Topic <- factor(beta_subset$Topic, levels = seq(1,K) %>% as.character())
p <- ggplot(beta_subset,
aes(x = Topic,
y = marker,
fill = beta_median)) +
geom_tile() +
ylab("Marker")+
scale_fill_gradientn(name = "Median marker distribution",
colours = c("gray98", "dodgerblue")) +
theme_minimal(base_size = 20) +
theme(plot.title = element_text(hjust = 0.5))
p
ggsave(paste0("../Figures/fea_dist_barplot_mibi_cytof_one_K_",K, ".png"), p, width = 20, height = 11)
rm(p)
log_lik_total_for_each_iteration <- numeric()
for(it in 1:((iter/2)*1)){
log_lik <- numeric()
for(j in 1:dim(x_train)[1]){# For each sample j in the first posterior sample
p_vec_pos <- as.matrix(t(beta_aligned[it, , ])) %*% matrix(theta_aligned[it, j,], nrow = K, byrow = T)
log_lik[j] <- dmultinom(x_train[j, ], size = sum(x_train[j, ]), prob = p_vec_pos, log = TRUE)
}
log_lik_total_for_each_iteration[it] <- sum(log_lik)
}
df_lp_corrected <- data.frame(lp = log_lik_total_for_each_iteration,
Chain = paste0("Chain ", rep(seq_len(1), each = (iter/2))))
fileN <- paste0("../Results/df_lp_train_mibi_cytof_one_K_", K, ".rds")
saveRDS(df_lp_corrected, fileN)
p_lp <- ggplot(data = df_lp_corrected) +
geom_histogram(aes(x = lp, col = Chain, fill = Chain),
bins = 100) +
theme_minimal(base_size = 20)
p_lp
ggsave(paste0("../Figures/lp_train_mibi_cytof_one_K_", K, ".png"), p_lp, width = 9, height = 6)
rm(log_lik_total_for_each_iteration, df_lp_corrected, p_lp)
(26+10)/2
