se_cd45 <- se_cd45[, sample(1:dim(se_cd45)[2], 30)]
se_mibi <- se_mibi[, sample(1:dim(se_mibi)[2], 30)]
cd45_mibi <- list("cd45" = se_cd45, "mibi" = se_mibi)
cd45_map <- data.frame(primary = as.character(colData(se_cd45)$SampleID),
colname = as.character(colData(se_cd45)$SampleID),
stringsAsFactors = FALSE)
mibi_map <- data.frame(primary = as.character(colData(se_mibi)$SampleID),
colname = as.character(colData(se_mibi)$SampleID),
stringsAsFactors = FALSE)
listmap <- list(cd45_map, mibi_map)
names(listmap) <- names(cd45_mibi)
dfmap <- listToMap(listmap = listmap)
sam_se_cd45 <- colData(se_cd45) %>% data.frame() %>% as.tibble()
sam_se_mibi <- colData(se_mibi) %>% data.frame() %>% as.tibble()
map_df <- full_join(sam_se_cd45, sam_se_mibi, by = "SampleID")
map_df %<>% as.data.frame
rownames(map_df) <- map_df$SampleID
mae <- MultiAssayExperiment(experiments = cd45_mibi,
colData = map_df,
sampleMap = dfmap)
trans_func <- function(x){
asinh(x/5)
}
inv_func <- function(x) {
5*sinh(x)
}
inv_func2 <- function(x) {
sinh(x)
}
# what normalization for cd45_sce_dropna expression
# asinh transformation with cofactor 5
assay(mae[["cd45"]]) <- inv_func(assay(mae[["cd45"]]))
# what normalization mibi_sce_immune
# cell size normalized, archsinh, standardized across the markers
# we couldn't guess the protein marker mean and standard deviation. We will
rw_mins <- rowMins(assay(mae[["mibi"]]))*(-1)
assay(mae[["mibi"]]) <-  assay(mae[["mibi"]]) + rw_mins
assay(mae[["mibi"]]) <- inv_func2(assay(mae[["mibi"]]))
names(rowData(mae[["mibi"]]))[1] <- "marker_name"
x1 <- assay(mae[["cd45"]]) %>% t() %>% as.tibble()
x2 <- assay(mae[["mibi"]]) %>% t() %>% as.tibble()
x <-  full_join(x1, x2)
common_markers <- colnames(x1)[colnames(x1) %in% colnames(x2)]
common_markers
rm(x1,x2)
#x = wideFormat(mae) %>% data.frame()
# rownames(x) = x[, 1]
# x = x[,-1]
x[is.na(x)] <- 0
ot = t(x)
geo_mean = function(x) {
if(all(x == 0)){
val = 0
}else{
val = exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row = apply(ot, 1, FUN = geo_mean)
dj = estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot = t(t(ot)/dj)
x = t(ot)
rm(ot)
x = apply(x , c(1,2), function(y){as.integer(y)})
x = as.matrix(x)
# theta[d] ~ dirichlet(alpha), alpha pseudocount for each topic
# beta[k] ~ dirichlet(gamma), gamma pseudocount for each ASV in each topic
stan.data = list(K = K,
V = ncol(x),
D = nrow(x),
n = x,
alpha = rep(.8, K),
gamma = rep(.5, ncol(x))
)
fileN = paste0("./Results/proteomics_filtered_K_",K,"_ite_",iter,".RData")
fileN
t1 = proc.time()
stan.fit = stan(file = "./lda.stan",
data = stan.data,
iter = iter,
chains = 4,
sample_file = NULL,
diagnostic_file = NULL,
cores = 4,
control = list(adapt_delta = 0.9),
save_dso = TRUE,
algorithm = "NUTS")
proc.time() - t1
save(stan.fit, file = fileN)
load(file = fileN)
# head(rstan::extract(stan.fit)$"lp__")
#
# tail(rstan::extract(stan.fit)$"lp__")
df = tibble(lp = rstan::extract(stan.fit)$"lp__", Chain = paste0("Chain ", rep(seq_len(4), each = (iter/2))))
ggplot(data = df) +
geom_histogram(aes(x = lp, col = Chain, fill = Chain))
head(summary(stan.fit, pars = c("theta"), probs = c(0.1, 0.9))$summary)
head(summary(stan.fit, pars = c("beta"), probs = c(0.1, 0.9))$summary)
# plot R hat of theta and beta
hist(summary(stan.fit, pars = c("theta", "beta"), probs = c(0.1, 0.9))$summary[,7])
sampler_params = get_sampler_params(stan.fit, inc_warmup = FALSE)
colnames(sampler_params[[1]])
mean_accept_stat_by_chain = sapply(sampler_params, function(x) mean(x[, "accept_stat__"]))
mean_accept_stat_by_chain
max_treedepth_by_chain = sapply(sampler_params, function(x) max(x[, "treedepth__"]))
max_treedepth_by_chain
samples = rstan::extract(stan.fit, permuted = TRUE, inc_warmup = FALSE, include = TRUE)# samples is a list
source("./RFuns/alignmentMatrix.R")
source("./RFuns/thetaAligned.R")
theta = samples$theta
aligned <- alignmentMatrix(theta, mae, K, iter = iter, chain = 4)
theta_aligned <- thetaAligned(theta, K, aligned, iter = iter, chain = 4)
dimnames(theta_aligned)[[2]] = colnames(mae) %>% unlist() %>% as.character()
dimnames(theta_aligned)[[3]] = c(paste0("Topic_", seq(1,K)))
# array to a dataframe
theta_all = melt(theta_aligned)
colnames(theta_all) = c("iteration", "Sample", "Topic", "topic.dis")
theta_all$Chain = paste0("Chain ", rep(seq(1, 4), each = (iter/2)))
sam = colData(mae) %>% data.frame()
theta_all$Sample = as.character(theta_all$Sample)
theta_all = left_join(theta_all, sam, by =c("Sample"= "SampleID"))
theta_all$Chain = factor(theta_all$Chain)
theta_all$Topic = factor(theta_all$Topic)
theta_all$immune_group[which(is.na(theta_all$immune_group))] <- "Unknown"
theta_all$immune_group <- factor(theta_all$immune_group)
p_chain = ggplot(data = theta_all) +
geom_boxplot(aes(x = Sample, y = topic.dis,
color = Topic, group = Sample)) +
facet_grid(Topic ~ Chain, scales = "free_x")+
ylab(bquote(theta[k])) +
ggtitle("Topic distribution for CD45 and MIBI-immune cells") +
xlab("Cells") +
theme(plot.title = element_text(hjust = 0.5, size = 20),
strip.text.y= element_text(size = 15, angle = 90),
strip.text.x = element_text(size = 15),
axis.text.x = element_blank(),
axis.text.y=element_text(size = 15),
axis.title = element_text(size = 15),
legend.position = "none")
p_chain
p = ggplot(data = theta_all) +
geom_boxplot(aes(x = Sample, y = topic.dis,
color = Topic, group = Sample)) +
facet_grid(Topic ~ immune_group, scales = "free_x")+
ylab(bquote(theta[k])) +
ggtitle("Topic distribution for CD45 and MIBI-immune cells") +
xlab("Cells") +
theme(plot.title = element_text(hjust = 0.5, size = 20),
strip.text.y= element_text(size = 15, angle = 90),
strip.text.x = element_text(size = 15),
axis.text.x = element_blank(),
axis.text.y=element_text(size = 15),
axis.title = element_text(size = 15),
legend.position = "none")
p
source("./RFuns/betaAligned.R")
beta <- samples$beta # an array (iterations *topic * ASV)
beta_aligned <- betaAligned(beta, K, aligned, iter = iter, chain = 4) # an array (iterations *topic * ASV)
# g(beta_k) transformation on beta_k
beta_logit <- beta_aligned
rm(beta_aligned)
for (i in seq_len(nrow(beta_logit))) {
for (k in seq_len(K)) {
beta_logit[i, k, ] = log(beta_logit[i, k, ])
beta_logit[i, k, ] = beta_logit[i, k, ] - mean(beta_logit[i, k, ])
}
}
# array to data frame
beta_hat <- beta_logit %>%
melt(varnames = c("iterations", "topic", "marker_ix"), value.name = "beta_logit") %>%
as_tibble()
beta_hat$marker <- colnames(x)[beta_hat$marker_ix]
rm(beta_logit)
# join rowData with beta_hat
marker_info <- full_join(rowData(mae[["cd45"]]) %>% data.frame(), rowData(mae[["mibi"]]) %>% data.frame())
marker_info$marker <- marker_info$marker_name
# If we use a taxanomy level with NA, we can replace the taxanomy level with one level before this level
#marker_info$Class[which(is.na(marker_info$Class))] = marker_info$Phylum[which(is.na(marker_info$Class))]
beta_hat <- beta_hat %>%
left_join(marker_info, by = "marker") %>% mutate(topic = paste("Topic", topic))
# sort ASV by the number of ASV per Class (there is no NA, if there is NA, we need to replace by some character to make sure that NA does not dominate on sort)
sorted_marker = names(sort(table(beta_hat$marker_name), decreasing = TRUE))
beta_hat$marker_name <- factor(beta_hat$marker_name)
beta_hat$marker_name <- factor(beta_hat$marker_name, levels = sorted_marker)
beta_hat$marker <- factor(beta_hat$marker)
beta_hat$marker_ix <- factor(beta_hat$marker_ix)
beta_hat$topic <- factor(beta_hat$topic)
beta_summary <- beta_hat %>%
dplyr::group_by(marker_ix, topic) %>%
dplyr::summarise(
marker = marker[1],
beta_median = median(beta_logit),
marker_name = marker_name[1],
hgnc_symbol = hgnc_symbol[1],
beta_upper = quantile(beta_logit, 0.975),
beta_lower = quantile(beta_logit, 0.025)
)
# we plot only 10 marker_name and merge other marker_name to "other"
levels(beta_summary$marker_name) <- c(levels(beta_summary$marker_name), "other")
beta_summary$marker_name[!(beta_summary$marker_name %in% levels(beta_summary$marker_name)[1:7])] <- "other"
beta_summary$marker_name <- droplevels(beta_summary$marker_name)
# we plot all 64 markers (the order was determined by total sum of reads per marker) and color by hgnc_symbol
x_order <- names(sort(colSums(x), decreasing = TRUE))
beta_subset <- beta_summary %>%
dplyr::filter(marker %in% x_order)
beta_subset$marker_ix <- rep(seq_len(nrow(beta_subset) / K), each = K)
beta_summary <- beta_hat %>%
dplyr::group_by(marker_ix, topic) %>%
dplyr::summarise(
marker = marker[1],
beta_median = median(beta_logit),
marker_name = marker_name[1],
hgnc_symbol = hgnc_symbol[1],
beta_upper = quantile(beta_logit, 0.975),
beta_lower = quantile(beta_logit, 0.025)
)
length(unique(beta_summary$marker_name))
# we plot only 20 marker_name and merge other marker_name to "other"
levels(beta_summary$marker_name) <- c(levels(beta_summary$marker_name), "other")
beta_summary$marker_name[!(beta_summary$marker_name %in% levels(beta_summary$marker_name)[1:20])] <- "other"
beta_summary$marker_name <- droplevels(beta_summary$marker_name)
# we plot all 64 markers (the order was determined by total sum of reads per marker) and color by hgnc_symbol
x_order <- names(sort(colSums(x), decreasing = TRUE))
beta_subset <- beta_summary %>%
dplyr::filter(marker %in% x_order)
beta_subset$marker_ix <- rep(seq_len(nrow(beta_subset) / K), each = K)
colourCount = 20
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
library(RColorBrewer)
colourCount = 20
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
p = ggplot(beta_subset) +
geom_hline(yintercept = 0, alpha = 0.4, size = 0.5, col = "#999999") +
geom_point(aes(x = marker_ix, y = beta_median, col = marker_name), size = 1) +
geom_errorbar(aes(x = marker_ix, alpha = beta_upper, ymax = beta_upper, ymin = beta_lower, col = marker_name), size = 0.4) +
facet_grid(topic ~ .) +
scale_color_manual(values = getPalette) +
scale_alpha(range = c(0.01, 1), breaks = c(1, 2, 3), guide = FALSE) + ## larger values have darker CIs
scale_x_continuous(expand = c(0, 0)) +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 2))) +
labs(x = "hgnc symbol", y = expression(paste("g(", beta[k], ")")), col = "hgnc_symbol") +
theme(panel.border = element_rect(fill = "transparent", size = 0.75),
axis.text.x = element_blank(),
strip.text.x = element_blank(),
legend.position = "bottom")
p
p = ggplot(beta_subset) +
geom_hline(yintercept = 0, alpha = 0.4, size = 0.5, col = "#999999") +
geom_point(aes(x = marker_ix, y = beta_median, col = marker_name), size = 1) +
geom_errorbar(aes(x = marker_ix, alpha = beta_upper, ymax = beta_upper, ymin = beta_lower, col = marker_name), size = 0.4) +
facet_grid(topic ~ .) +
scale_color_manual(values = getPalette(20)) +
scale_alpha(range = c(0.01, 1), breaks = c(1, 2, 3), guide = FALSE) + ## larger values have darker CIs
scale_x_continuous(expand = c(0, 0)) +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 2))) +
labs(x = "hgnc symbol", y = expression(paste("g(", beta[k], ")")), col = "hgnc_symbol") +
theme(panel.border = element_rect(fill = "transparent", size = 0.75),
axis.text.x = element_blank(),
strip.text.x = element_blank(),
legend.position = "bottom")
p
p = ggplot(beta_subset) +
geom_hline(yintercept = 0, alpha = 0.4, size = 0.5, col = "#999999") +
geom_point(aes(x = marker_ix, y = beta_median, col = marker_name), size = 1) +
geom_errorbar(aes(x = marker_ix, alpha = beta_upper, ymax = beta_upper, ymin = beta_lower, col = marker_name), size = 0.4) +
facet_grid(topic ~ .) +
scale_color_manual(values = getPalette(21)) +
scale_alpha(range = c(0.01, 1), breaks = c(1, 2, 3), guide = FALSE) + ## larger values have darker CIs
scale_x_continuous(expand = c(0, 0)) +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 2))) +
labs(x = "hgnc symbol", y = expression(paste("g(", beta[k], ")")), col = "hgnc_symbol") +
theme(panel.border = element_rect(fill = "transparent", size = 0.75),
axis.text.x = element_blank(),
strip.text.x = element_blank(),
legend.position = "bottom")
p
p = ggplot(beta_subset) +
geom_hline(yintercept = 0, alpha = 0.4, size = 0.5, col = "#999999") +
geom_point(aes(x = marker_ix, y = beta_median, col = marker_name), size = 1) +
geom_errorbar(aes(x = marker_ix, alpha = beta_upper, ymax = beta_upper, ymin = beta_lower, col = marker_name), size = 0.4) +
facet_grid(topic ~ .) +
scale_color_manual(values = getPalette(21)) +
scale_alpha(range = c(0.01, 1), breaks = c(1, 2, 3), guide = FALSE) + ## larger values have darker CIs
scale_x_continuous(expand = c(0, 0)) +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 2))) +
labs(x = "marker name", y = expression(paste("g(", beta[k], ")")), col = "marker") +
theme(panel.border = element_rect(fill = "transparent", size = 0.75),
axis.text.x = element_blank(),
strip.text.x = element_blank(),
legend.position = "bottom")
p
common_markers
beta_summary <- beta_hat %>%
dplyr::group_by(marker_ix, topic) %>%
dplyr::summarise(
marker = marker[1],
beta_median = median(beta_logit),
marker_name = marker_name[1],
hgnc_symbol = hgnc_symbol[1],
beta_upper = quantile(beta_logit, 0.975),
beta_lower = quantile(beta_logit, 0.025)
)
# we plot only 20 marker_name and merge other marker_name to "other"
levels(beta_summary$marker_name) <- c(levels(beta_summary$marker_name), "other")
beta_summary$marker_name[!(beta_summary$marker_name %in% levels(beta_summary$marker_name)[1:30])] <- "other"
beta_summary$marker_name <- droplevels(beta_summary$marker_name)
# we plot all 64 markers (the order was determined by total sum of reads per marker) and color by hgnc_symbol
x_order <- names(sort(colSums(x), decreasing = TRUE))
beta_subset <- beta_summary %>%
dplyr::filter(marker %in% x_order)
beta_subset$marker_ix <- rep(seq_len(nrow(beta_subset) / K), each = K)
p = ggplot(beta_subset) +
geom_hline(yintercept = 0, alpha = 0.4, size = 0.5, col = "#999999") +
geom_point(aes(x = marker_ix, y = beta_median, col = marker_name), size = 1) +
geom_errorbar(aes(x = marker_ix, alpha = beta_upper, ymax = beta_upper, ymin = beta_lower, col = marker_name), size = 0.4) +
facet_grid(topic ~ .) +
scale_color_manual(values = getPalette(31)) +
scale_alpha(range = c(0.01, 1), breaks = c(1, 2, 3), guide = FALSE) + ## larger values have darker CIs
scale_x_continuous(expand = c(0, 0)) +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 2))) +
labs(x = "marker name", y = expression(paste("g(", beta[k], ")")), col = "marker") +
theme(panel.border = element_rect(fill = "transparent", size = 0.75),
axis.text.x = element_blank(),
strip.text.x = element_blank(),
legend.position = "bottom")
p
beta_summary <- beta_hat %>%
dplyr::group_by(marker_ix, topic) %>%
dplyr::summarise(
marker = marker[1],
beta_median = median(beta_logit),
marker_name = marker_name[1],
hgnc_symbol = hgnc_symbol[1],
beta_upper = quantile(beta_logit, 0.975),
beta_lower = quantile(beta_logit, 0.025)
)
table(beta_summary$marker_name)
sort(beta_summary$marker_name[beta_summary$beta_median])
beta_summary$marker_name[sort(beta_summary$beta_median, decreasing = TRUE)]
beta_summary$marker_name[order(beta_summary$beta_median)]
beta_summary$marker_name[order(beta_summary$beta_median, decreasing = TRUE)]
unique(beta_summary$marker_name[order(beta_summary$beta_median, decreasing = TRUE)])
choose_marker <- c(unique(beta_summary$marker_name[order(beta_summary$beta_median, decreasing = TRUE)])[1:20], common_markers)
length(choose_marker)
length(unique(choose_marker))
beta_summary <- beta_hat %>%
dplyr::group_by(marker_ix, topic) %>%
dplyr::summarise(
marker = marker[1],
beta_median = median(beta_logit),
marker_name = marker_name[1],
hgnc_symbol = hgnc_symbol[1],
beta_upper = quantile(beta_logit, 0.975),
beta_lower = quantile(beta_logit, 0.025)
)
# we plot only 20 marker_name and merge other marker_name to "other"
levels(beta_summary$marker_name) <- c(levels(beta_summary$marker_name), "other")
choose_marker <- c(unique(beta_summary$marker_name[order(beta_summary$beta_median, decreasing = TRUE)])[1:20], common_markers)
choose_marker <- unique(choose_marker)
beta_summary$marker_name[!(beta_summary$marker_name %in% choose_marker)] <- "other"
# beta_summary$marker_name[!(beta_summary$marker_name %in% levels(beta_summary$marker_name)[1:30])] <- "other"
beta_summary$marker_name <- droplevels(beta_summary$marker_name)
# we plot all 64 markers (the order was determined by total sum of reads per marker) and color by hgnc_symbol
x_order <- names(sort(colSums(x), decreasing = TRUE))
beta_subset <- beta_summary %>%
dplyr::filter(marker %in% x_order)
beta_subset$marker_ix <- rep(seq_len(nrow(beta_subset) / K), each = K)
p = ggplot(beta_subset) +
geom_hline(yintercept = 0, alpha = 0.4, size = 0.5, col = "#999999") +
geom_point(aes(x = marker_ix, y = beta_median, col = marker_name), size = 1) +
geom_errorbar(aes(x = marker_ix, alpha = beta_upper, ymax = beta_upper, ymin = beta_lower, col = marker_name), size = 0.4) +
facet_grid(topic ~ .) +
scale_color_manual(values = getPalette(length(choose_marker))) +
scale_alpha(range = c(0.01, 1), breaks = c(1, 2, 3), guide = FALSE) + ## larger values have darker CIs
scale_x_continuous(expand = c(0, 0)) +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 2))) +
labs(x = "marker name", y = expression(paste("g(", beta[k], ")")), col = "marker") +
theme(panel.border = element_rect(fill = "transparent", size = 0.75),
axis.text.x = element_blank(),
strip.text.x = element_blank(),
legend.position = "bottom")
p
choose_marker
unique(beta_summary$marker_name[order(beta_summary$beta_median, decreasing = TRUE)])
beta_summary <- beta_hat %>%
dplyr::group_by(marker_ix, topic) %>%
dplyr::summarise(
marker = marker[1],
beta_median = median(beta_logit),
marker_name = marker_name[1],
hgnc_symbol = hgnc_symbol[1],
beta_upper = quantile(beta_logit, 0.975),
beta_lower = quantile(beta_logit, 0.025)
)
# we plot only 20 marker_name and merge other marker_name to "other"
levels(beta_summary$marker_name) <- c(levels(beta_summary$marker_name), "other")
unique(beta_summary$marker_name[order(beta_summary$beta_median, decreasing = TRUE)])
unique(beta_summary$marker_name[order(beta_summary$beta_median, decreasing = TRUE)])[1:20]
unique(beta_summary$marker_name[order(beta_summary$beta_median, decreasing = TRUE)])[1:20] %>% as.character()
common_markers
choose_marker <- c(unique(beta_summary$marker_name[order(beta_summary$beta_median, decreasing = TRUE)])[1:20] %>% as.character(), common_markers)
choose_marker <- unique(choose_marker)
choose_marker
beta_summary$marker_name[!(beta_summary$marker_name %in% choose_marker)] <- "other"
table(beta_summary$marker_name)
# beta_summary$marker_name[!(beta_summary$marker_name %in% levels(beta_summary$marker_name)[1:30])] <- "other"
beta_summary$marker_name <- droplevels(beta_summary$marker_name)
# beta_summary$marker_name[!(beta_summary$marker_name %in% levels(beta_summary$marker_name)[1:30])] <- "other"
table(beta_summary$marker_name)
# we plot all 64 markers (the order was determined by total sum of reads per marker) and color by hgnc_symbol
x_order <- names(sort(colSums(x), decreasing = TRUE))
beta_subset <- beta_summary %>%
dplyr::filter(marker %in% x_order)
beta_subset$marker_ix <- rep(seq_len(nrow(beta_subset) / K), each = K)
x_order
# we plot all 64 markers (the order was determined by total sum of reads per marker) and color by hgnc_symbol
x_order <- names(sort(colSums(x), decreasing = TRUE))
beta_subset <- beta_summary %>%
dplyr::filter(marker_name %in% x_order)
View(beta_subset)
beta_subset$marker_ix <- rep(seq_len(nrow(beta_subset) / K), each = K)
p = ggplot(beta_subset) +
geom_hline(yintercept = 0, alpha = 0.4, size = 0.5, col = "#999999") +
geom_point(aes(x = marker_ix, y = beta_median, col = marker_name), size = 1) +
geom_errorbar(aes(x = marker_ix, alpha = beta_upper, ymax = beta_upper, ymin = beta_lower, col = marker_name), size = 0.4) +
facet_grid(topic ~ .) +
scale_color_manual(values = getPalette(length(choose_marker))) +
scale_alpha(range = c(0.01, 1), breaks = c(1, 2, 3), guide = FALSE) + ## larger values have darker CIs
scale_x_continuous(expand = c(0, 0)) +
guides(color = guide_legend(override.aes = list(alpha = 1, size = 2))) +
labs(x = "marker name", y = expression(paste("g(", beta[k], ")")), col = "marker") +
theme(panel.border = element_rect(fill = "transparent", size = 0.75),
axis.text.x = element_blank(),
strip.text.x = element_blank(),
legend.position = "bottom")
p
# 148 patients
se_cd45 <- SummarizedExperiment(
assays = list(exprs = assay(cd45_sce_dropna)),
colData = colData(cd45_sce_dropna),
rowData = rowData(cd45_sce_dropna)
)
# Subset CD45 cells from the live cells from TN patients
se_cd45 <- se_cd45[, colData(se_cd45)$Clinical.Subtype == "TN"]
se_cd45 <- se_cd45[, colSums(assay(se_cd45)) > 0]
se_mibi <- SummarizedExperiment(
assays = list(exprs = assay(mibi_sce_immune)),
colData = colData(mibi_sce_immune),
rowData = rowData(mibi_sce_immune)
)
se_mibi <- se_mibi[, colSums(assay(se_mibi)) > 0]
names(colData(se_cd45))[1:3] <- c("SampleID", "Condition", "PatientID")
names(colData(se_mibi))[c(1,9)] <- c("SampleID", "PatientID")
colData(se_cd45)$SampleID <- paste0(seq(1: length(colData(se_cd45)$SampleID)), "_", colData(se_cd45)$PatientID)
colData(se_mibi)$SampleID <- paste0(seq(1: length(colData(se_mibi)$SampleID)), "_", colData(se_mibi)$PatientID)
rownames(colData(se_cd45)) <- colData(se_cd45)$SampleID
rownames(colData(se_mibi)) <- colData(se_mibi)$SampleID
se_cd45
se_mibi
head(theta_all)
theta_summary <- theta_all %>%
dplyr::group_by(Sample, Topic) %>%
dplyr::summarise(
max_theta = max(topic.dis)
)
dim(theta_summary)
Vuew9theta_summary
View(theta_summary)
4.479388e-01
1.141340e-01
9.999754e-01
theta_summary <- theta_all %>%
dplyr::group_by(Sample, Topic) %>%
dplyr::summarise(
median_theta = median(topic.dis)
)
8.667330e-04
7.399323e-04
9.982391e-01
theta_summary_assign <- theta_summary %>%
dplyr::group_by(Sample) %>%
dplyr::summarise(
Topic = Topic[median_theta == max(median_theta)]
)
theta_summary_assign
View(theta_summary)
View(theta_summary_assign)
theta_summary_assign <- theta_summary %>%
dplyr::group_by(Sample) %>%
dplyr::summarise(
value = max(median_theta),
Topic = Topic[median_theta == max(median_theta)]
)
View(rowData(mae[["mibi"]]))
View(rowData(mae[["mibi"]]) %>% data.frame())
View(rowData(mae[["mibi"]]) %>% data.frame())
View(colData(mae) %>% data.frame())
theta_summary_assign$Sample[theta_summary_assign$Topic == "Topic_1"]
colnames(mae)
colData(mae[, theta_summary_assign$Sample[theta_summary_assign$Topic == "Topic_1"], ])
colData(mae[, theta_summary_assign$Sample[theta_summary_assign$Topic == "Topic_2"], ])
View(colData(mae[, theta_summary_assign$Sample[theta_summary_assign$Topic == "Topic_2"], ]))
View(colData(mae[, theta_summary_assign$Sample[theta_summary_assign$Topic == "Topic_2"], ]) %>% data.frame())
View(colData(mae[, theta_summary_assign$Sample[theta_summary_assign$Topic == "Topic_3"], ]) %>% data.frame())
table(colData(mibi_sce_immune)$SITE_02)
View(colData(mae[, theta_summary_assign$Sample[theta_summary_assign$Topic == "Topic_1"], ]) %>% data.frame())
table(colData(mibi_sce_immune)$LATERAL)
table(colData(mibi_sce_immune)$STAGE)
1532.107/3600
1532.107/60
View(colData(cd45_sce_dropna) %>% data.frame())
View(colData(mibi_sce_immune) %>% data.frame())
